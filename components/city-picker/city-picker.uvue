<template>
  <ux-popup ref="uxPopup" :isMaskClick="false" pos="bottom">
    <scroll-view class="popup-inner">
      <view class="popup-header">
        <text class="u-font-36 font-f-SanJi" style="color:#000"
          @click="close()">提示</text>
      </view>
      <picker-view class="picker-view" :value="value" @change="onPickerChange">
        <picker-view-column class="picker-view-column">
          <view class="item" v-for="(item,index) in provinces" :key="index">
            <text class="text">{{item['label']}}</text>
          </view>
        </picker-view-column>
        <picker-view-column class="picker-view-column">
          <view class="item" v-for="(item,index) in citys" :key="index"><text
              class="text">{{item.label}}</text>
          </view>
        </picker-view-column>
        <picker-view-column class="picker-view-column">
          <view class="item" v-for="(item,index) in areas" :key="index"><text
              class="text">{{item.label}}</text></view>
        </picker-view-column>
      </picker-view>
    </scroll-view>
  </ux-popup>
</template>

<script>
  import { getCitys } from '@/utils/api';
  import { IRootCityType } from '@/utils/api/types.uts';
  type AreaType = {
    value : number;
    label : string;
  }

  export default {
    data() {
      return {
        provinces: [] as UTSJSONObject[],
        citys: [] as AreaType[],
        areas: [] as AreaType[],
        value: [] as string[],
      }
    },

    methods: {
      async getCityList() : Promise<any> {
        try {
          const response = await getCitys();
          let res = (response as UTSJSONObject)
          console.log(111, res);
          const isSuccess = res['code'] as number === 1
          if (isSuccess) {
            this.provinces = res['data'] as UTSJSONObject[]
          }
          console.log('this.provinces', this.provinces);
          return res;
        } catch (err) {
          console.log(err);
          return null;
        }
      },
      showModal() {
        this.getCityList().then(() => {
          const popup = this.$refs['uxPopup'] as UxPopupComponentPublicInstance;
          popup.open()
        })
      },
      close() {
        const popup = this.$refs['uxPopup'] as UxPopupComponentPublicInstance;
        popup.close()
      },
      onPickerChange(e : UniPickerViewChangeEvent) {
        console.log(111, e);
      }
    }
  }
</script>

<style lang="scss">
  @import "@/static/css/flex.scss";

  .popup-inner {
    width: 100%;
    height: 600px;
    background-color: #fff;
  }

  .popup-header {
    @include flex(row, center, center);
  }

  .picker-view {
    width: 100%;
    height: 320px;
    margin-top: 10px;
  }

  .item {
    height: 50px;
  }

  .text {
    line-height: 50px;
    text-align: center;
  }
</style>