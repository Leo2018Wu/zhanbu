<template>
  <view class="login1-page safe-top">
    <view class="inner">
      <image class="bg" src="../../static/images/login/login_bg1.png"
        mode="widthFix"></image>
      <image class="img1" src="../../static/images/login/login_img1.png"
        mode="widthFix"></image>
      <view class="divide">
        <image class="img2" src="../../static/images/login/line.png"
          mode="widthFix"></image>
        <text class="font-f-SanJi u-font-40 u-mx-10">让传统变潮流</text>
        <image class="img3" src="../../static/images/login/line.png"
          mode="widthFix"></image>
      </view>
    </view>
    <fui-button width="534rpx" margin="30% auto 0 auto" radius="7rpx"
      background="#020202" text="立即登录" @click="verify(false)"></fui-button>
  </view>
</template>

<script lang="uts">
  import { state, setGlobalUserInfo } from '@/store/index.uts'
  import { loginBySms } from '@/utils/api';
  export default {
    data() {
      return {
        title: '一键登录',
        univerifyManager: null as UniverifyManager | null
      }
    },
    computed: {
      userInfo() : UTSJSONObject { //定义可绑定在界面上的globalNum
        return state.userInfo
      }
    },
    onLoad() {
      this.univerifyManager = uni.getUniverifyManager();
      // 预登录
      this.univerifyManager?.preLogin({
        success: () => {
          console.log("pre login success");
        },
        fail: (err : PreLoginFail) => {
          console.error("pre login fail => " + JSON.stringify(err));
          uni.showModal({
            title: '预登录失败',
            content: JSON.parseObject(err.cause?.cause?.message ?? "")?.getString("errorDesc") ?? err.errMsg,
            showCancel: false
          });
        }
      } as PreLoginOptions);
    },
    methods: {
      verify(fullScreen : boolean) {
        // 校验预登录是否有效
        const isPreLoginValid = this.univerifyManager?.isPreLoginValid() ?? false;
        if (isPreLoginValid) {
          // 预登录有效，执行登录
          this.login(fullScreen);
        } else {
          // 预登录无效，执行预登录
          this.univerifyManager?.preLogin({
            success: () => {
              console.log("pre login success");
              this.login(fullScreen);
            },
            fail: (err : PreLoginFail) => {
              console.error("pre login fail => " + JSON.stringify(err));
              uni.showModal({
                title: '预登录失败',
                content: JSON.parseObject(err.cause?.cause?.message ?? "")?.getString("errorDesc") ?? err.errMsg,
                showCancel: false
              });
            }
          } as PreLoginOptions);
        }
      },
      login(fullScreen : boolean) {
        this.univerifyManager?.login({
          // 登录页样式
          univerifyStyle: {
            fullScreen: fullScreen,
            backgroundColor: "#FFFFFF",
            loginBtnText: "一键登录",
            logoPath: "/static/images/login/login_img1.png"
          } as UniverifyStyle,
          success: (res : LoginSuccess) => {
            this.loginPost(res.accessToken as string, res.openId as string);
          },
          fail: (err : LoginFail) => {
            console.error("login fail => " + err);
            uni.showModal({
              title: '登录失败',
              content: JSON.parseObject(err.cause?.cause?.message ?? "")?.getString("errorDesc") ?? err.errMsg,
              showCancel: false
            });
          }
        } as LoginOptions);
      },
      async loginPost(access_token : string, openid : string) : Promise<any | null> {
        try {
          uni.showLoading({
            title: '正在登录...',
            mask: false
          });
          const response = await loginBySms({ access_token, openid });
          let res = (response as UTSJSONObject)
          const isSuccess = res['code'] as number === 1
          if (isSuccess) {
            setGlobalUserInfo(res['data'] as UTSJSONObject)
            this.univerifyManager?.close();
            uni.redirectTo({
              url: '/tabbarPages/custom-tab-bar',
              success: res => { },
              fail: () => { },
              complete: () => {
                uni.hideLoading()
              }
            });
          }
          return res;
        } catch (err) {
          console.log(err);
          uni.hideLoading()
          return null;
        }
      },
      nextLogin() {
        uni.navigateTo({ url: '/commonPages/login/login2', })
      }
    }
  }
</script>

<style lang="scss" scoped>
  @import "@/static/css/flex.scss";

  .login1-page {
    padding-top: 100rpx;
    @include flex(column, flex-start, center);

    .inner {
      position: relative;
      width: 736rpx;
      height: 728rpx;
      @include flex(row, center, flex-end);

      .bg {
        position: absolute;
        left: 0;
        bottom: 0;
        width: 736rpx;
        height: 728rpx;
      }

      .img1 {
        position: absolute;
        width: 372rpx;
        height: 378rpx;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
      }
    }

    .divide {
      @include flex(row, center, center);

      .img2 {
        width: 230rpx;
      }

      .img3 {
        width: 230rpx;
        transform: rotate(180deg);
      }
    }
  }
</style>