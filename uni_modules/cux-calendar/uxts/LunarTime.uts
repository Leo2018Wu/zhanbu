import {LunarUtil} from './LunarUtil';
import {Lunar} from './Lunar';
// import {NineStar} from './NineStar';
// import {I18n} from './I18n';

export class LunarTime {

    private readonly ganIndex: number;
    private readonly zhiIndex: number;
    private lunar: Lunar;

    static fromYmdHms(lunarYear: number, lunarMonth: number, lunarDay: number, hour: number, minute: number, second: number): LunarTime {
        return new LunarTime(lunarYear, lunarMonth, lunarDay, hour, minute, second);
    }

    constructor(lunarYear: number, lunarMonth: number, lunarDay: number, hour: number, minute: number, second: number) {
        this.lunar = Lunar.fromYmdHms(lunarYear, lunarMonth, lunarDay, hour, minute, second);
        this.zhiIndex = LunarUtil.getTimeZhiIndex([(hour < 10 ? '0' : '') + hour, (minute < 10 ? '0' : '') + minute].join(':'));
        this.ganIndex = (this.lunar.getDayGanIndexExact() % 5 * 2 + this.zhiIndex) % 10;
    }

    getGanIndex(): number {
        return this.ganIndex;
    }

    getZhiIndex(): number {
        return this.zhiIndex;
    }

    getGan(): string {
        return LunarUtil.GAN[this.ganIndex + 1];
    }

    getZhi(): string {
        return LunarUtil.ZHI[this.zhiIndex + 1];
    }

    getGanZhi(): string {
        return this.getGan() + this.getZhi();
    }

    getShengXiao(): string {
        return LunarUtil.SHENGXIAO[this.zhiIndex + 1];
    }

    getPositionXi(): string {
        return LunarUtil.POSITION_XI[this.ganIndex + 1];
    }

    getPositionXiDesc(): string | null {
        return LunarUtil.POSITION_DESC.get(this.getPositionXi());
    }

    getPositionYangGui(): string {
        return LunarUtil.POSITION_YANG_GUI[this.ganIndex + 1];
    }

    getPositionYangGuiDesc(): string | null {
        return LunarUtil.POSITION_DESC.get(this.getPositionYangGui());
    }

    getPositionYinGui(): string {
        return LunarUtil.POSITION_YIN_GUI[this.ganIndex + 1];
    }

    getPositionYinGuiDesc(): string | null {
        return LunarUtil.POSITION_DESC.get(this.getPositionYinGui());
    }

    getPositionFu(sect: number = 2): string {
        return (1 == sect ? LunarUtil.POSITION_FU : LunarUtil.POSITION_FU_2)[this.ganIndex + 1];
    }

    getPositionFuDesc(sect: number = 2): string | null {
        return LunarUtil.POSITION_DESC.get(this.getPositionFu(sect));
    }

    getPositionCai(): string {
        return LunarUtil.POSITION_CAI[this.ganIndex + 1];
    }

    getPositionCaiDesc(): string | null {
        return LunarUtil.POSITION_DESC.get(this.getPositionCai());
    }

    getNaYin(): string | null {
        return LunarUtil.NAYIN.get(this.getGanZhi());
    }

    getTianShen(): string {
		let dayZhi: number = LunarUtil.ZHI_TIAN_SHEN_OFFSET.get(this.lunar.getDayZhiExact()) as number;
        return LunarUtil.TIAN_SHEN[(this.zhiIndex + dayZhi) % 12 + 1];
    }

    getTianShenType(): string | null {
        return LunarUtil.TIAN_SHEN_TYPE.get(this.getTianShen());
    }

    getTianShenLuck(): string | null {
		let tianshenType: string = this.getTianShenType() as string;
        return LunarUtil.TIAN_SHEN_TYPE_LUCK.get(tianshenType);
    }

    getChong(): string {
        return LunarUtil.CHONG[this.zhiIndex];
    }

    getSha(): string | null {
        return LunarUtil.SHA.get(this.getZhi());
    }

    getChongShengXiao(): string {
        const chong = this.getChong();
        for (let i = 0, j = LunarUtil.ZHI.length; i < j; i++) {
            if (LunarUtil.ZHI[i] === chong) {
                return LunarUtil.SHENGXIAO[i];
            }
        }
        return '';
    }

    getChongDesc(): string {
        return '(' + this.getChongGan() + this.getChong() + ')' + this.getChongShengXiao();
    }

    getChongGan(): string {
        return LunarUtil.CHONG_GAN[this.ganIndex];
    }

    getChongGanTie(): string {
        return LunarUtil.CHONG_GAN_TIE[this.ganIndex];
    }

    getYi(): string[] {
        return LunarUtil.getTimeYi(this.lunar.getDayInGanZhiExact(), this.getGanZhi());
    }

    getJi(): string[] {
        return LunarUtil.getTimeJi(this.lunar.getDayInGanZhiExact(), this.getGanZhi());
    }

    // getNineStar(): NineStar {
    //     const solarYmd = this.lunar.getSolar().toYmd();
    //     const jieQi = this.lunar.getJieQiTable();
    //     let asc = false;
    //     if (solarYmd >= jieQi.get(I18n.getMessage('jq.dongZhi')).toYmd() && solarYmd < jieQi.get(I18n.getMessage('jq.xiaZhi')).toYmd()) {
    //         asc = true;
    //     }
    //     const offset = asc ? [0, 3, 6] : [8, 5, 2];
    //     const start = offset[this._lunar.getDayZhiIndex() % 3];
    //     const index = asc ? (start + this._zhiIndex) : (start + 9 - this._zhiIndex);
    //     return NineStar.fromIndex(index % 9);
    // }

    getXun(): string {
        return LunarUtil.getXun(this.getGanZhi());
    }

    getXunKong(): string {
        return LunarUtil.getXunKong(this.getGanZhi());
    }

    getMinHm(): string {
        let hour = this.lunar.getHour();
        if (hour < 1) {
            return '00:00';
        } else if (hour > 22) {
            return '23:00';
        }
        if (hour % 2 == 0) {
            hour -= 1;
        }
        return (hour < 10 ? '0' : '') + hour + ':00';
    }

    getMaxHm(): string {
        let hour = this.lunar.getHour();
        if (hour < 1) {
            return '00:59';
        } else if (hour > 22) {
            return '23:59';
        }
        if (hour % 2 != 0) {
            hour += 1;
        }
        return (hour < 10 ? '0' : '') + hour + ':59';
    }
}